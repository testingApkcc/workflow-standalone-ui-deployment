---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: test-workflow-ui-build-service
  namespace: tekton-pipelines
spec:
  description: |
    Based on "cleanup-cloudformation" parameter
    this pipeline will do UI deployment with AWS cloudformation or 
    sync deployment files to s3 bucket and invalidate cloudfront 
    This pipeline will do the following steps:
      - Using the git-clone catalog Task to clone the UI source Code
      - It will do build the UI code , and create the deployment artifacts that need to be copied to S3
      when "cleanup-cloudformation" parameter is true
      - Then it will git clone the deployment source code 
      - It will copy the build artifacts into the www folder in deployment workspace.
      - It will then invoke the cloud formation template using aws cli
      when "cleanup-cloudformation" parameter is false
      - sync UI code to s3 bucket
      - Run cloudfront invalidation
  params:
  - name: ui-repo-url
    type: string
    description: The UI git repository URL to clone from.
  - name: repo-revision
    type: string
    description: service revision to checkout. (branch, tag, sha, ref, etc...)
  - name: deployment-repo-revision
    type: string
    description: service revision to checkout. (branch, tag, sha, ref, etc...)
  - name: deployment-repo-url
    type: string
    description: The deployment git repository URL to clone from.
  - name: cleanup-cloudformation
    type: string
    description: parameter to control cloudformation cleanup
  - name: environment
    type: string
    description: Environment type (e.g., prod, dev, stage).
  - name: source-s3
    type: string
    description: S3 bucket for source code (eg:workflow-static-secure-site)
  workspaces:
  - name: ui-code
    description: |
      This workspace will clone the UI codes and build the code
  - name: aws-secrets
    description: |
      This workspace will hold aws credentials
  tasks:
  - name: fetch-repo
    taskRef:
      name: git-clone
    workspaces:
    - name: output
      workspace: ui-code
    params:
    - name: url
      value: $(params.ui-repo-url)
    - name: subdirectory
      value: "ui-code"
    - name: revision
      value: $(params.repo-revision)
  - name: list-workspace
    runAfter:
      - fetch-repo
    taskRef:
      name: read-workspace
    params:
    - name: PATH_CONTEXT
      value: ui-code
    workspaces:
    - name: local-ws
      workspace: ui-code
  - name: install-dependencies
    runAfter:
      - fetch-repo
    taskRef:
      name: npm-20-11-1
    workspaces:
    - name: source
      workspace: ui-code
    params:
    - name: ARGS
      value:
        - install
    - name: PATH_CONTEXT
      value: ui-code
  - name: build-ui
    runAfter:
      - install-dependencies
    taskRef:
      name: npm-20-11-1
    workspaces:
      - name: source
        workspace: ui-code
    params:
      - name: PATH_CONTEXT
        value: ui-code
      - name: ARGS
        value:
          - "run"
          - "build"
  - name: list-workspace-after-build
    runAfter:
      - build-ui
    taskRef:
      name: read-workspace
    params:
    - name: PATH_CONTEXT
      value: ui-code
    workspaces:
    - name: local-ws
      workspace: ui-code
  - name: list-build-folder-contents
    runAfter:
      - build-ui
    taskRef:
      name: read-directory
    params:
    - name: directory
      value: ui-code/next
    workspaces:
    - name: local-ws
      workspace: ui-code
  - name: fetch-deployment-repo
    when:
      - input: "$(params.cleanup-cloudformation)"
        operator: in
        values: ["true"]
    runAfter:
        - list-build-folder-contents
    taskRef:
      name: git-clone
    workspaces:
    - name: output
      workspace: ui-code
    params:
    - name: subdirectory
      value: "deploy-code"
    - name: url
      value: $(params.deployment-repo-url)
  - name: list-deployment-workspace
    when:
      - input: "$(params.cleanup-cloudformation)"
        operator: in
        values: ["true"]
    runAfter:
      - fetch-deployment-repo
    taskRef:
      name: read-workspace
    params:
      - name: PATH_CONTEXT
        value: deploy-code
    workspaces:
    - name: local-ws
      workspace: ui-code
  - name: copy-build-content-in-www
    when:
      - input: "$(params.cleanup-cloudformation)"
        operator: in
        values: ["true"]
    runAfter:
      - list-deployment-workspace
    taskRef:
      name: copy-folder-between-workspace
    params:
    - name: source-directory
      value: ui-code/.next
    - name: dest-directory
      value: deploy-code/www
    workspaces:
    - name: source-ws
      workspace: ui-code
    - name: dest-ws
      workspace: ui-code
  - name: cleanup-prior-ui-hosting
    when:
      - input: "$(params.cleanup-cloudformation)"
        operator: in
        values: ["true"]
    runAfter:
      - copy-build-content-in-www
    taskRef:
      name: aws-cli
    params:
      - name: SCRIPT
        value: |
          export AWS_CONFIG_FILE=/tekton/home/.aws/config
          export AWS_SHARED_CREDENTIALS_FILE=/tekton/home/.aws/credentials
          echo "aws configuration"
          aws configure list
          echo "Cleanup UI hosting, "
          pushd $4
          aws --region us-east-1 cloudformation delete-stack --stack-name ops-appkube-$2-$3
          aws --region us-east-1 cloudformation wait stack-delete-complete --stack-name ops-appkube-$2-$3
          aws s3 rm s3://$1 --recursive
          aws s3 rb s3://ops-appkube-$3-$2-log --force
          aws s3 rb s3://ops-appkube-$3-$2-root --force
      - name: ARGS
        value:
          - "$(params.source-s3)" # s3 bucket name
          - workflow # service name
          - "$(params.environment)" # environment
          - $(workspaces.source.path)/deploy-code # working directory
    workspaces:
    - name: source
      workspace: ui-code
    - name: secrets
      workspace: aws-secrets
  - name: run-cloudformation-for-ui-hosting
    when:
      - input: "$(params.cleanup-cloudformation)"
        operator: in
        values: ["true"] 
    runAfter:
      - cleanup-prior-ui-hosting
    taskRef:
      name: aws-cli
    params:
      - name: SCRIPT
        value: |
          export AWS_CONFIG_FILE=/tekton/home/.aws/config
          export AWS_SHARED_CREDENTIALS_FILE=/tekton/home/.aws/credentials
          echo "aws configuration"
          aws configure list
          pushd $5
          echo "aws cloudformation execution"
          aws --region us-east-1 cloudformation package --template-file $1 --s3-bucket $2 --output-template-file packaged.template
          aws --region us-east-1 cloudformation deploy --stack-name ops-appkube-$3-$4 --template-file packaged.template --capabilities CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND --parameter-overrides DomainName=synectiks.net SubDomain=$4-$3 CreateApex=no HostedZoneId=ZY8RNBR15YWYU AppkubeDepartment=ops AppkubeProduct=appkube AppkubeEnvironment=$4 AppkubeService=$3
      - name: ARGS
        value:
          - $(workspaces.source.path)/deploy-code/main.yaml # template 
          - "$(params.source-s3)" # s3 bucket name
          - workflow # service name
          - "$(params.environment)" # environment
          - $(workspaces.source.path)/deploy-code # working directory
    workspaces:
    - name: source
      workspace: ui-code
    - name: secrets
      workspace: aws-secrets
  - name: run-invalidations-for-ui-hosting
    when:
      - input: "$(params.cleanup-cloudformation)"
        operator: in
        values: ["false"]
    runAfter:
      - run-cloudformation-for-ui-hosting
    taskRef:
      name: aws-cli
    params:
      - name: SCRIPT
        value: |
          export AWS_CONFIG_FILE=/tekton/home/.aws/config
          export AWS_SHARED_CREDENTIALS_FILE=/tekton/home/.aws/credentials
          echo "aws configuration"
          aws configure list
          pushd $2
          echo sync s3 with new dployment files
          aws s3 sync .next s3://ops-appkube-$4-$3-root --delete
          echo "aws cloudfront invalidatation"
          domain="${environment}-${service_name}.synectiks.net"  # Construct the domain to search for in the query
          #export cloudfrontid=$(aws cloudfront list-distributions --query 'DistributionList.Items[?Aliases.Items[?contains(@, `$4-$3.synectiks.net`)]].Id' --output text)
          export cloudfrontid=$(aws cloudfront list-distributions --query "DistributionList.Items[?Aliases.Items[?contains(@, '${domain}')]].Id" --output text)
          echo cloudfrontid: $cloudfrontid
          invalidation_output=$(aws cloudfront create-invalidation --distribution-id $cloudfrontid --paths "/*")
          invalidation_id=$(echo $invalidation_output | grep -oP '(?<="Id": ")[^"]*' | cut -d'"' -f1)      
          aws cloudfront wait invalidation-completed --distribution-id $cloudfrontid --id $invalidation_id
          echo Invalidation completed, Invalidation ID: $invalidation_id
      - name: ARGS
        value:
          - workflow.synectiks.net # url
          - $(workspaces.source.path)/ui-code # working directory
          - workflow # service name
          - "$(params.environment)"  # environment
    workspaces:
    - name: source
      workspace: ui-code
    - name: secrets
      workspace: aws-secrets
---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: test-workflow-ui-build-service-run
  namespace: tekton-pipelines
spec:
  pipelineRef:
    name: test-workflow-ui-build-service
  workspaces:
  - name: ui-code
    volumeClaimTemplate:
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 4Gi
  - name: aws-secrets
    secret:
      secretName: smoke-aws-credentials
  params:
  - name: ui-repo-url
    value: https://github.com/AppkubeCloud/workflow-standalone-ui.git
  - name: repo-revision
    value: ''
  - name: deployment-repo-revision
    value: "dev"
  - name: deployment-repo-url
    value: https://github.com/AppkubeCloud/workflow-standalone-ui-deployment.git
  - name: cleanup-cloudformation
    value: "true"
  - name: environment
    type: string
    value: "dev"
  - name: source-s3
    type: string
    value: "$(params.environment == 'dev' ? params.environment + '-workflow-static-secure-site' : 'workflow-static-secure-site')" # Conditional prefix based on environment variable